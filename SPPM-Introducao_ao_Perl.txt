Introdução ao Perl
~~~~~~~~~~~~~~~~~~

A visão deste curso é dar base para o programador que deseja ter uma visão
geral sobre a linguagem Perl. Mostrando as estruturas que a compõe, bem como
sua história.

1. Introdução:

Flexível, portável, versátil, e disponível para todos, Perl cresceu de um
substituto simples para Shell Scripts, a uma linguagem completa e de propósito
geral.

Esta popular, rica em recursos está ganhando ainda mais popularidade enquanto
adquire mais "features" a cada nova versão.

bug:
 * isso não é uma verdade quando falamos do Perl 5, afinal, fazem anos que
   nós estamos esperando o Perl 6;

Uma característica particular, porem muito poderosa, do Perl é a sua
implementação de bibliotecas com módulos, o qual a fez uma linguagem
genuinamente extensível

com a sua clareza, estrutura lógica e abordagem prática, este guia é ideal
para guiar e acompanhar o leitor ao mundo Perl.

1.1 Conceitos de programação

Para podermos entender quais as bases do Perl, devemos primeiro relembrar
alguns conceitos fundamentais de programação:

1.1.1 Linguagem dinâmica

É uma classe de linguagens, com um alto nível de abstração [1], no qual em
tempo de execução realizam tarefas que outras linguagens (chamadas
"estáticas") fariam em tempo de compilação. Neste comportamento dinâmico, o
software poderia incluir/importar novas partes, extender objetos e definições,
tudo isso é provido de maneira direta e simples.

[1] Níveis de abstração é uma classificação, relativa ao desenvolvimento de
software e a uma linguagem de programação, indicando 

Atenção: O termo "linguagem dinâmica" é diferente de "tipagem dinâmica". O
primeiro refere-se ao dinamismo em tempo de execução; o segundo, refere-se a
validação dos tipos.

Leia mais:
    * http://en.wikipedia.org/wiki/Dynamic_language

1.1.2 Tipagem dinâmica

Uma linguagem de programação tem tipos dinâmicos (por exemplo: int, char,
scalar, array, hash), quando a maioria das verificações de tipos é feita em
tempo de execução. Ou seja, os tipos, propriamente ditos, são associados aos
valores e não as variáveis.

Exemplos de linguagens com tipos dinâmicos: Groovy, JavaScript, Lisp, Lua,
Objective-C, PHP, Perl, Prolog, Python, Ruby, Smalltalk, Tcl.

Tipos dinâmicos vão acusar seus erros em tempo de execução; por exemplo, um
valor pode ser um tipo inesperado ou inexistente, ou uma operação errônea (sem
sentido) pode ser atribuída a um tipo que não a suporta. Deve ficar evidente
que este tipo de situação é _sempre_ causada pelo programador, e em um cenário
assim, pode ser um pouco mais trabalhoso encontrar o causador. É uma situação
esperada.

Se compararmos as linguagens de Tipagem Dinâmica com as de Tipagem Estática,
elas fazem muito menos verificações nos fontes em tempo de compilação, apenas
é certificado de que o programa está sintaticamente correto. Verificações em
tempo de execução podem potencialmente ser mais sofisticados, porque são
utilizadas as informações geradas pela execução do software, em
contra-partida, estas verificações são executadas todas as vezes que o
software for chamado.

O desenvolvimento em linguagens de Tipos Dinâmicos tem grande auxílio por boas
práticas de programação, como por exemplo Testes Unitários (Unit Testing).
"Testar" é a chave em desenvolvimento profissional de software, e é
particularmente importante nestes casos. Na prática, os testes asseguram a
operação correta do seu software de forma muito mais ampla se comparado às
estáticas (ou seja, através da verificação de tipos feita pelo compilador).

Saiba mais:
    http://en.wikipedia.org/wiki/Dynamic_typing#Dynamic_typing

1.1.3 Sobre os "tempos"

Nos tópicos acima nós citamos os tempos de "Compilação" e de "Execução", é
necessário relembrar o que é feito em cada um deles:

* Tempo de Compilação (Compile-Time) [1]:

    Refere-se as operações feitas por um compilador, as necessidades de uma
    linguagem de programação que devem ser equivalentes as descritas no código
    fonte para que este processo seja executado com sucesso. As operações
    executadas em "Compile-Time" geralmente incluem análise sintática, vários
    tipos de análises semânticas, etc.

* Tempo de Execução (Run-Time) [2]:

    Refere-se ao período enquanto um software está sendo executado, do começo
    ao seu fim. Também pode indicar a duração deste período. O termo é
    geralmente empregado para contraste de outras fases do desenvolvimento e
    uso de um software.

Estes são os dois mais importantes, porem nós ainda temos o "Link Time" [3]
que consiste em: 

    Refere-se as operações feitas por uma ferramenta que fará a união entre os
    elementos que são necessários para que um software seja entregue com
    sucesso após o Tempo de Compilação. As operações performadas em "Link
    Time" incluem a reunião de endereços externos ao software, vários tipo de
    validações para referências cruzadas entre módulos, entre outros.

[1] http://en.wikipedia.org/wiki/Compile_time
[2] http://en.wikipedia.org/wiki/Run_time_(computing)
[3] http://en.wikipedia.org/wiki/Link_time

1.2 Para acompanhar o curso

Este curso é, antes de mais nada, uma introdução prática ao mundo de
desenvolvimento Perl, portanto, os seguintes itens são indispensáveis:

* Editor de Texto competente;
* Browser;
* Interpretador Perl instalado;
* Acesso a internet;
* Acesso a Console;

Também é desejável, ter noções de inglês para leitura técnica. Você vai
perceber ao longo deste material que os melhores documentos estão em inglês, e
que em muitos casos a tradução para "pt_BR" deixa a desejar.

2. História da Linguagem 

2.1 Perl 4 e 5

Perl é uma linguagem em evolução, frequentemente é atualizada com suporte para
novas features. Apesar disso, ela ainda é uma linguagem fácil de aprender e
não perdeu suas bases concisas, evoluindo de uma simples ferramenta de
construir scripts para uma completa, no sentido exato da palavra, construtora
de aplicações orientada a objetos [1].

Perl evoluiu de forma paralela, próxima a Internet. Ganhou popularidade nos
seus primeiros dias como uma linguagem para escrever rapidamente scripts
utilitários. Isso era graças ao poderoso processador de textos e familiaridade
para programadores que faziam uso do Sed [2] e Awk [3], nestas duas o Perl era
parcialmente inspirado. Perl estava obviamente relacionada ao C, mas isso
também era uma característica derivada de Lisp. O resultado ganhou
popularidade como uma linguagem para escrever CGIs (server-side) scripts para
Web Servers, novamente, porque as habilidades de lidar com texto e porque era
facilmente manipulável e expressiva. Tudo isso, durante o que foi chamado de
Perl 4.

A quinta versão da linguagem a levou para um novo patamar, principalmente
através dos recursos de Orientação a Objetos [1]. Seguindo a sua filosofia,
Perl preocupou-se primeiramente em ter o recurso funcionando, ao invés de usar
este tempo discutindo a parte ideológica, pois na época haviam grupos de
usuários que se colocavam contra a mudança. A versão 5 marcou a história do
Perl, transformando-a em uma linguagem para escrever aplicações grandes e
sérias, ao invés de scripts simples.

A versão 5.005 começou a trazer suporte a threads [2], porem, somente dentro
do interpretador. Isso trouxe a linguagem para o Windows e outros sistemas
operacionais que não tinham suporte a processos filhos [3], através de uma
emulação de uma chamada "fork" (system-call) [4]. Uma mudança importante para
suportar estas plataformas.

Na versão 5.6, Perl revisou a sua politica de versionamento, para se mais
específica. Em particular, ela adotou o mesmo sistema utilizado pelo GNU/Linux
[5] para versionar. Também nesta mesma versão, Perl introduziu melhorias,
sendo as principais: um suporte melhor aos idiomas (comandos, sintaxe) Unix
sobre o Windows [6] e suporte inicial ao Unicode [7].

A partir da 5.6, suporte experimental às threads ao nível do usuário, ou seja,
para escrever Perl com suporte a esta tecnologia.

Perl 5.8 trouxe melhorias para a implementação de threads do interpretador.
Também trouxe suporte completo para Unicode, suporte para PerlIO [8] e camadas
para "filehandle", hashes restritos como substituto para os pseudo-hashes
[10], melhor gerenciamento dos sinais [11]; mais tarde, melhorou o suporte
para Windows e uma suite de testes com suporte a regressão.

[ 1] http://en.wikipedia.org/wiki/Object-oriented_programming
[ 2] http://en.wikipedia.org/wiki/Thread_(computer_science)
[ 3] http://en.wikipedia.org/wiki/Fork_%28operating_system%29
[ 4] http://en.wikipedia.org/wiki/System_call
[ 5] http://en.wikipedia.org/wiki/Linux_kernel#Version_numbering
[ 6] http://win32.perl.org/wiki/index.php?title=Main_Page
[ 7] http://en.wikipedia.org/wiki/Unicode
[ 8] http://perldoc.perl.org/PerlIO.html
[ 9] http://perldoc.perl.org/FileHandle.html
[10] http://perldesignpatterns.com/?PseudoHash
[11] http://en.wikipedia.org/wiki/Signal_%28computing%29

2.2 Futuro: Perl 6

O futuro é o Perl 6 [1]. O interpretador foi inteiro reescrito, totalmente
Orientado a Objetos, desde suas raízes, bem como a adição da máquina virtual
Parrot [2], local onde o Perl será executado na versão 6. Enquanto o Perl 6 é
radicalmente diferente em seu interior, ele será compatível com a maioria dos
fontes escritos para a versão 5.

Um destaque é o projeto Ponie [3], no qual estão transferindo o suporte ao
Perl 5 para a Parrot, o planejamento é para que seja compatível com o Perl
5.10, ao menos.

[1] http://dev.perl.org/Perl6.
[2] http://www.parrotcode.org
[3] http://www.poniecode.org 

2.3 Larry Wall

Perl foi originalmente desenvolvida por Larry Wall [1], um linguista [2]
trabalhando como Sysadmin [3] na NASA [4]. E, no ano de 1987, criou uma
linguagem -- de propósito geral, com foco em scripts Unix -- que transformou o
processamento de texto em uma tarefa _muito_ mais fácil. Desde então, ele
continua a trabalhar no seu projeto e tornou-se um programador mundialmente
conhecido. Atualmente, ele está trabalhando no Perl 6.

[1] http://en.wikipedia.org/wiki/Larry_Wall
[2] http://en.wikipedia.org/wiki/Linguistics
[3] http://en.wikipedia.org/wiki/Systems_administrator
[4] http://en.wikipedia.org/wiki/NASA

3. Quem usa Perl?

A resposta não pode ser mais simples: praticamente todos nós, direta ou
indiretamente.

Perl foi fundamental para o crescimento e estruturação da internet como nós
conhecemos hoje, visto que naquela época eram escassas as ferramentas para
automatizar tarefas com a qualidade e a versatilidade de Perl. Outro fator
importante é que ela nasceu em ambientes unix-like e nunca perdeu esta
intimidade, e por suas qualidades, tornou-se a primeira escolha de quase todos
os Sysadmins.

Se você imaginar neste momento, qual o caminho que os pacotes percorrem da sua
estação até ter acesso a internet, eu posso afirmar -- com certeza -- de que a
sua conexão foi gerenciada ou auxiliada de alguma forma por uma ferramenta
escrita em Perl.  Em todos os sistemas operacionais unix-like existem scripts
Perl para as mais diversas tarefas dentro do sistema operacional.

Com as informações acima, não é difícil imaginar todas as grande corporações,
provedores, hostings, startups, que fazem uso do Perl.

Assim como Hassan Schroeder, o primeiro webmaster da Sun afirmou: "Perl is the
duct tape of the Internet.".

Para saber mais:
    http://www.oreillynet.com/pub/a/oreilly/perl/news/importance_0498.html

5. Ferramentas (??)

5.1. Editores de Texto

Atenção: O editor é a arma mais potente no seu arsenal!

No mundo de linguagens dinâmicas a ferramenta mais comum, para o dia-a-dia, é
um bom editor de textos.

Na afirmação acima, fica sendo a explicação a parte mais interessante:
linguagens dinâmicas -- como o próprio nome já diz -- traz as diretivas de
como o software vai se comportar para o tempo de execução, assim como já foi
explicado, em outras palavras, o comportamento do software é mais difícil de
prever.

A palavra "prever" é uma das pedras fundamentais para o trabalho de uma IDE,
pois, ela ajuda o programador a entender e interagir com o _comportamento_ do
software.

    Por exemplo: Suponhamos que você criou uma nova variável: "my $test;",
    agora, vamos nos lembrar quais tipos, ou seja, quais valores eu posso
    atribuir a esta variável. Ao falar de Perl, nós já temos a resposta:
    qualquer um! Agora, voltando ao trabalho das IDEs, você deve estar de
    acordo comigo: este é um comportamento _muito_ mais complexo, se o
    compararmos a uma linguagem estática.

Porem, vamos voltar aos editores de texto, agora. Na contra-mão das IDEs,
temos muitas vantagens:

    * rápido para inicializar (exige poucos recursos computacionais);
    * foco para a interação com o texto;
    * recursos de edição avançados;
    * extensibilidade;
    * macros;
    * snippets;
    * extremamente personalizável;

Quando trocamos o que está relacionado a "prever" e nos voltamos para o
"planejar". Ou seja, uma interação entre homem e texto.

Editores recomendados:

    * Vim (GVim, Vim, MacVim) [1];
    * EMacs [2];
    * TextMate [3];
    * JEdit [4];

No entanto, ao leitor interessado pelo uso de uma IDE, temos um projeto que
está crescendo bastante, ganhando adeptos e certamente merece a nossa
atenção: Padre IDE ("Padre, the Perl IDE") [5].

Para saber mais:
    http://www.moolenaar.net/habits.html
    http://oreilly.com/catalog/9780596519544
    http://pragprog.com/the-pragmatic-programmer

[1] http://www.vim.org/
[2] http://www.gnu.org/software/emacs/
[3] http://macromates.com/
[4] http://www.jedit.org/
[5] http://padre.perlide.org/

9. Compiladores

Falar sobre compiladores e sobre o compilador Perl, primeiramente

http://en.wikipedia.org/wiki/Compiling

    
E é exatamente na palavra "prever"


77. Perl e E-Mail

Uma união mais do que estável e bem sucedida. Perl é a linguagem mais
largamente empregada para tratar email (na prática não passa de texto). Boa
parte do que você já leu, enviou, encaminhou, escreveu ou mandou para a
lixeira do seu cliente de email, foi processado com Perl. Este tipo de
comparação também pode ser feita com a internet hoje!




TODO:
    * Ao falar sobre IDEs, editores de texto para desenvolvimento, é essencial
      lebrar do Padre!
    * Explicar os tempos: compilação e execução. Seria legal expandir um pouco
      dentro de cada um dos três, falando sobre os subtópicos. Talvez até
      chegar a estudar um compilador simples, vamos ver o que agrega mais para
      as aulas;

99. Bibliografia

Pro Perl, Peter Wainwright ( ISBN: 1-59059-438-X )
